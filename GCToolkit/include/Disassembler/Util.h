#pragma once

#include <array>

#include <capstone/ppc.h>

namespace PowerPC::Util {

constexpr std::array<ppc_insn, 94> branch_instructions = {
    PPC_INS_B, PPC_INS_BA,

    PPC_INS_BC, PPC_INS_BCA,   // PPC_INS_BCLR,    PPC_INS_BCCTR,
    PPC_INS_BLT, PPC_INS_BLTA, // PPC_INS_BLTLR,   PPC_INS_BLTCTR,
    PPC_INS_BLE, PPC_INS_BLEA, // PPC_INS_BLELR,   PPC_INS_BLECTR,
    PPC_INS_BEQ, PPC_INS_BEQA, // PPC_INS_BEQLR,   PPC_INS_BEQCTR,
    PPC_INS_BGE, PPC_INS_BGEA, // PPC_INS_BGELR,   PPC_INS_BGECTR,
    PPC_INS_BGT, PPC_INS_BGTA, // PPC_INS_BGTLR,   PPC_INS_BGTCTR,
    PPC_INS_BNL, PPC_INS_BNLA, // PPC_INS_BNLLR,   PPC_INS_BNLCTR,
    PPC_INS_BNE, PPC_INS_BNEA, // PPC_INS_BNELR,   PPC_INS_BNECTR,
    PPC_INS_BNG, PPC_INS_BNGA, // PPC_INS_BNGLR,   PPC_INS_BNGCTR,
    PPC_INS_BSO, PPC_INS_BSOA, // PPC_INS_BSOLR,   PPC_INS_BSOCTR,
    PPC_INS_BNS, PPC_INS_BNSA, // PPC_INS_BNSLR,   PPC_INS_BNSCTR,
    PPC_INS_BUN, PPC_INS_BUNA, // PPC_INS_BUNLR,   PPC_INS_BUNCTR,
    PPC_INS_BNU, PPC_INS_BNUA, // PPC_INS_BNULR,   PPC_INS_BNUCTR,

    // PPC_INS_BLR,   PPC_INS_BCTR,

    PPC_INS_BT, PPC_INS_BTA,       // PPC_INS_BTLR,    PPC_INS_BTCTR,
    PPC_INS_BF, PPC_INS_BFA,       // PPC_INS_BFLR,    PPC_INS_BFCTR,
    PPC_INS_BDNZ, PPC_INS_BDNZA,   // PPC_INS_BDNZLR,  // ---------
    PPC_INS_BDNZT, PPC_INS_BDNZTA, // PPC_INS_BDNZTLR, // ---------
    PPC_INS_BDNZF, PPC_INS_BDNZFA, // PPC_INS_BDNZFLR, // ---------
    PPC_INS_BDZ, PPC_INS_BDZA,     // PPC_INS_BDZLR,   // ---------
    PPC_INS_BDZT, PPC_INS_BDZTA,   // PPC_INS_BDZTLR,  // ---------
    PPC_INS_BDZF, PPC_INS_BDZFA,   // PPC_INS_BDZFLR,  // ---------
};

constexpr std::array<ppc_insn, 94> call_instructions = {
    PPC_INS_BL, PPC_INS_BLA,

    PPC_INS_BCL, PPC_INS_BCLA,   // PPC_INS_BCLRL,    PPC_INS_BCCTRL,
    PPC_INS_BLTL, PPC_INS_BLTLA, // PPC_INS_BLTLRL,   PPC_INS_BLTCTRL,
    PPC_INS_BLEL, PPC_INS_BLELA, // PPC_INS_BLELRL,   PPC_INS_BLECTRL,
    PPC_INS_BEQL, PPC_INS_BEQLA, // PPC_INS_BEQLRL,   PPC_INS_BEQCTRL,
    PPC_INS_BGEL, PPC_INS_BGELA, // PPC_INS_BGELRL,   PPC_INS_BGECTRL,
    PPC_INS_BGTL, PPC_INS_BGTLA, // PPC_INS_BGTLRL,   PPC_INS_BGTCTRL,
    PPC_INS_BNLL, PPC_INS_BNLLA, // PPC_INS_BNLLRL,   PPC_INS_BNLCTRL,
    PPC_INS_BNEL, PPC_INS_BNELA, // PPC_INS_BNELRL,   PPC_INS_BNECTRL,
    PPC_INS_BNGL, PPC_INS_BNGLA, // PPC_INS_BNGLRL,   PPC_INS_BNGCTRL,
    PPC_INS_BSOL, PPC_INS_BSOLA, // PPC_INS_BSOLRL,   PPC_INS_BSOCTRL,
    PPC_INS_BNSL, PPC_INS_BNSLA, // PPC_INS_BNSLRL,   PPC_INS_BNSCTRL,
    PPC_INS_BUNL, PPC_INS_BUNLA, // PPC_INS_BUNLRL,   PPC_INS_BUNCTRL,
    PPC_INS_BNUL, PPC_INS_BNULA, // PPC_INS_BNULRL,   PPC_INS_BNUCTRL,

    // PPC_INS_BLRL,   PPC_INS_BCTRL,

    PPC_INS_BTL, PPC_INS_BTLA,       // PPC_INS_BTLRL,    PPC_INS_BTCTRL,
    PPC_INS_BFL, PPC_INS_BFLA,       // PPC_INS_BFLRL,    PPC_INS_BFCTRL,
    PPC_INS_BDNZL, PPC_INS_BDNZLA,   // PPC_INS_BDNZLRL,  // ---------
    PPC_INS_BDNZTL, PPC_INS_BDNZTLA, // PPC_INS_BDNZTLRL, // ---------
    PPC_INS_BDNZFL, PPC_INS_BDNZFLA, // PPC_INS_BDNZFLRL, // ---------
    PPC_INS_BDZL, PPC_INS_BDZLA,     // PPC_INS_BDZLRL,   // ---------
    PPC_INS_BDZTL, PPC_INS_BDZTLA,   // PPC_INS_BDZTLRL,  // ---------
    PPC_INS_BDZFL, PPC_INS_BDZFLA,   // PPC_INS_BDZFLRL,  // ---------
};

bool IsBranchInstruction(ppc_insn instr);

bool IsCallInstruction(ppc_insn instr);

} // namespace PowerPC::Util
